#!/usr/bin/env python
import csv

from EPPs.common import StepEPP



class ParseFluidXScan(StepEPP):
    _max_nb_input_containers = 1

    # additional argument required to obtain the file location for newly create manifest in the LIMS step
    def __init__(self, argv=None):
        super().__init__(argv)
        self.fluidx_scan = self.cmd_args.fluidx_scan

    @staticmethod
    def add_args(argparser):
        argparser.add_argument(
            '-x', '--fluidx_scan', type=str, required=True, help='Sample manifest generated by the LIMS'
        )

    def _run(self):



        # open the fluidx scan file
        fluidx_scan_file=self.open_or_download_file(self.fluidx_scan)
        fluidx_scan_list = list(csv.reader(fluidx_scan_file))

        all_inputs=self.artifacts



        #check the number of samples in the step matches the number of tubes the fluidx scanner counted
        if not len(all_inputs) == int(fluidx_scan_list[1][1]):
            raise ValueError('The number of samples in the step (%s) does not match the number of tubes scanned (%s)'
                             % (len(all_inputs), fluidx_scan_list[1][1]))

        #check that the rack barcode in the step matches the fluidx output
        if not all_inputs[0].container.name == fluidx_scan_list[0][1]:
            raise ValueError('The scanned rack barcode (%s) does not match the container name in the LIMS (%s)'
                             %(fluidx_scan_list[0][1],all_inputs[0].container.name))

        sample_dict={}

        for artifact in all_inputs:
            sample_dict[artifact.location[0].name+artifact.location[1].replace(':','')]=artifact.samples[0]

        sample_list=[]

        for line in fluidx_scan_list:
            if line[0] not in ['Rack ID','Tube Count']:
                if line[0]+line[1] in sample_dict:
                    sample_dict[line[0]+line[1]].udf['2D Barcode'] = line[2]
                    sample_list.append(sample_dict[line[0] + line[1]])

        self.lims.put_batch(sample_list)


if __name__ == '__main__':
    ParseFluidXScan().run()
