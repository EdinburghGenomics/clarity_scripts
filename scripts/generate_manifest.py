#!/usr/bin/env python
from openpyxl import load_workbook

from EPPs.common import StepEPP

class GenerateManifest96WellPlate(StepEPP):
    # populate the sample manifest with the sample date. Sample manifest template is determined by a step udf.
    # The starting row and columns are determined by step UDFs.

    _use_load_config = False  # prevent the loading of the config file

    # additional argument required to obtain the file location for newly create manifest in the LIMS step
    def __init__(self, argv=None):
        super().__init__(argv)
        self.manifest = self.cmd_args.manifest

    @staticmethod
    def add_args(argparser):
        argparser.add_argument(
            '-m', '--manifest', type=str, required=True, help='Sample manifest generated by the LIMS'
        )

    def _run(self):

        # obtain all of the inputs for the step
        all_inputs = self.process.all_inputs(unique=True)

        # check all input containers have the same type
        container_types = set()

        for artifact in all_inputs:
            container_types.add(artifact.container.type)

        if len(container_types) > 1:
            raise ValueError('Only 1 container type is permitted. Multiple container types are present in the step')

        # obtain step udfs
        step_udfs = self.process.udf

        # obtain the name of container type of the samples
        if list(container_types)[0].name == '96 well plate':
            con_type = '[Plates]'
        elif list(container_types)[0].name == 'rack 96 positions':
            con_type = '[Tubes]'

        # define counter to ensure each sample is written to a new well
        row_counter = step_udfs[con_type + 'Starting Row']

        # open the correct manifest template for the container type
        wb = load_workbook(filename=step_udfs[con_type + 'Manifest File Path'])
        ws = wb.active

        configurable_udfs = []

        for step_udf_key in step_udfs.keys():
            tag_position = step_udf_key.find('[Sample UDF]')

            if tag_position > -1:
                configurable_udfs.append(step_udf_key[tag_position + 12:])

        # populate the wells in the active work sheet in the excel in the columns defined by the step UDFs
        for artifact in all_inputs:
            sample_udf = artifact.samples[0].udf
            # populate the manifest with sample attributes
            ws[step_udfs[con_type + 'Sample Name'] + str(row_counter)] = artifact.name
            ws[step_udfs[con_type + 'Container Name'] + str(row_counter)] = artifact.container.name
            ws[step_udfs[con_type + 'Well'] + str(row_counter)] = artifact.location[1]
            ws[step_udfs[con_type + 'Project ID'] + str(row_counter)] = artifact.samples[0].project.name

            # populate the manifest with sample UDFs which are configurable by adding or removing step UDFs in the
            # format [CONTAINER TYPE - either Tubes or Plates][Sample UDF]Name of UDF
            for configurable_udf in configurable_udfs:
                ws[step_udfs[con_type + '[Sample UDF]' + configurable_udf] + str(row_counter)] = sample_udf[
                    configurable_udf]

            row_counter += 1

        # create a new file with the original file name plus a suffix containing the project ID
        new_filepath_suffix = '_' + all_inputs[0].samples[0].project.name + '.xlsx'
        new_filepath = self.manifest + '-' + step_udfs[con_type + 'Manifest File Path'].replace('.xlsx',
                                                                                                new_filepath_suffix)
        wb.save(filename=new_filepath)


if __name__ == '__main__':
    GenerateManifest96WellPlate().run()
